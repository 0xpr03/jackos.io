import{_ as i,o as u,c as r,a as n,b as a,w as o,d as s,e,r as c}from"./app.fe6d796d.js";const k={},d=n("h1",{id:"rust-linux-kernel-development",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rust-linux-kernel-development","aria-hidden":"true"},"#"),s(" Rust linux kernel development")],-1),m=n("h2",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),s(" Introduction")],-1),h=s("This is following on from a "),f={href:"https://www.youtube.com/watch?v=-l-8WrGHEGI",target:"_blank",rel:"noopener noreferrer"},g=s("talk I really enjoyed"),v=s(" on how to create a linux kernel module using rust, but the presenter ran out of time. Please watch that video if you want more background on rust and why it's desirable in the kernel, this will be aimed towards people already familiar with the language."),w=s("We'll be working off "),_={href:"https://github.com/jackos/linux",target:"_blank",rel:"noopener noreferrer"},b=s("jackos/linux"),y=s(" which is a fork from "),x={href:"https://github.com/Rust-for-Linux/linux",target:"_blank",rel:"noopener noreferrer"},q=s("Rust-for-Linux/linux"),R=s(", which itself forks from "),D={href:"https://github.com/torvalds/linux",target:"_blank",rel:"noopener noreferrer"},V=s("torvalds/linux"),M=s("Raise a "),j={href:"https://github.com/jackos/jackos.io/compare",target:"_blank",rel:"noopener noreferrer"},I=s("pull request"),S=s(" or "),O={href:"https://github.com/jackos/jackos.io/issues/new",target:"_blank",rel:"noopener noreferrer"},z=s("issue"),F=s(" for any problems you have with this tutorial at: "),A={href:"https://github.com/jackos/jackos.io",target:"_blank",rel:"noopener noreferrer"},L=s("jackos/jackos.io"),C=s("."),N=e('<h2 id="virtualization" tabindex="-1"><a class="header-anchor" href="#virtualization" aria-hidden="true">#</a> Virtualization</h2><p>You&#39;ll need to enable virtualization on your CPU in the bios, the steps to take are different depending on your motherboard and CPU. It may be called <code>SVM</code>, <code>AMD-V</code>, <code>Intel Virtualization</code> or something similar. Enable one of those options if you can find them, otherwise google something like <code>virtualization amd asus</code> or <code>virtualization intel gigabyte</code></p><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> Dependencies</h2><p>Choose an option below and follow the steps, beware the docker containers are over <code>6gb</code> so you may want to install everything natively if you have internet bandwidth limits. Alternatively you can create your own <code>Dockerfile</code> from the examples here:</p>',4),T=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# Download and run an arch linux version of the docker container"),s(`
`),n("span",{class:"token function"},"docker"),s(` run -it jackosio/rust-linux:arch

`),n("span",{class:"token comment"},"# Download and run an ubuntu version of the docker container"),s(`
`),n("span",{class:"token function"},"docker"),s(` run -it jackosio/rust-linux:latest

`)])])],-1),P=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# Install required packages"),s(`
`),n("span",{class:"token function"},"sudo"),s(" pacman -Syuu --noconfirm "),n("span",{class:"token function"},"bc"),s(" bison "),n("span",{class:"token function"},"curl"),s(" clang diffutils flex "),n("span",{class:"token function"},"git"),s(" gcc llvm libelf lld ncurses "),n("span",{class:"token function"},"make"),s(` qemu-system-x86

`),n("span",{class:"token comment"},"# Save these to your ~/.bashrc or similar and start a new terminal session "),s(`
`),n("span",{class:"token builtin class-name"},"export"),s(),n("span",{class:"token assign-left variable"},[n("span",{class:"token environment constant"},"PATH")]),n("span",{class:"token operator"},"="),n("span",{class:"token string"},[s('"/root/.cargo/bin:'),n("span",{class:"token variable"},[s("${"),n("span",{class:"token environment constant"},"PATH"),s("}")]),s('"')]),s(`
`),n("span",{class:"token builtin class-name"},"export"),s(),n("span",{class:"token assign-left variable"},"MAKEFLAGS"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"-j16"'),s(`
`),n("span",{class:"token builtin class-name"},"export"),s(),n("span",{class:"token assign-left variable"},"LLVM"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"1"'),s(`

`),n("span",{class:"token comment"},"# If you don't have rustup installed"),s(`
`),n("span",{class:"token function"},"curl"),s(" https://sh.rustup.rs -sSf "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token function"},"bash"),s(` -s -- -y

`),n("span",{class:"token comment"},"# Install the bindgen version required by the project"),s(`
`),n("span",{class:"token function"},"git"),s(" clone https://github.com/rust-lang/rust-bindgen -b v0.56.0 --depth"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(`
cargo `),n("span",{class:"token function"},"install"),s(` --path rust-bindgen

`),n("span",{class:"token comment"},"# Clone the `Rust for Linux` repo"),s(`
`),n("span",{class:"token function"},"git"),s(" clone https://github.com/jackos/linux -b tutorial-start --depth"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token builtin class-name"},"cd"),s(` linux

`),n("span",{class:"token comment"},"# Set your rustc version to the current version being used with Rust for Linux"),s(`
rustup override `),n("span",{class:"token builtin class-name"},"set"),s(),n("span",{class:"token variable"},[n("span",{class:"token variable"},"$("),s("scripts/min-tool-version.sh rustc"),n("span",{class:"token variable"},")")]),s(`
rustup component `),n("span",{class:"token function"},"add"),s(` rust-src

`),n("span",{class:"token comment"},"# Do an initial minimal build to make sure everything is working"),s(`
`),n("span",{class:"token function"},"make"),s(` allnoconfig qemu-busybox-min.config rust.config
`),n("span",{class:"token function"},"make"),s(`

`)])])],-1),B=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# Install required packages"),s(`
`),n("span",{class:"token function"},"sudo"),s(),n("span",{class:"token function"},"apt"),s(` update
`),n("span",{class:"token function"},"sudo"),s(),n("span",{class:"token function"},"apt"),s(),n("span",{class:"token function"},"install"),s(" -y "),n("span",{class:"token function"},"bc"),s(" bison "),n("span",{class:"token function"},"curl"),s(" clang fish flex "),n("span",{class:"token function"},"git"),s(" gcc libclang-dev libelf-dev lld llvm-dev libncurses-dev "),n("span",{class:"token function"},"make"),s(` neovim qemu-system-x86

`),n("span",{class:"token comment"},"# Save these to your ~/.bashrc or similar and start a new terminal session "),s(`
`),n("span",{class:"token builtin class-name"},"export"),s(),n("span",{class:"token assign-left variable"},[n("span",{class:"token environment constant"},"PATH")]),n("span",{class:"token operator"},"="),n("span",{class:"token string"},[s('"/root/.cargo/bin:'),n("span",{class:"token variable"},[s("${"),n("span",{class:"token environment constant"},"PATH"),s("}")]),s('"')]),s(`
`),n("span",{class:"token builtin class-name"},"export"),s(),n("span",{class:"token assign-left variable"},"MAKEFLAGS"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"-j16"'),s(`
`),n("span",{class:"token builtin class-name"},"export"),s(),n("span",{class:"token assign-left variable"},"LLVM"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"1"'),s(`

`),n("span",{class:"token comment"},"# If you don't have rustup installed"),s(`
`),n("span",{class:"token function"},"curl"),s(" https://sh.rustup.rs -sSf "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token function"},"bash"),s(` -s -- -y

`),n("span",{class:"token comment"},"# Install the bindgen version required by the project"),s(`
`),n("span",{class:"token function"},"git"),s(" clone https://github.com/rust-lang/rust-bindgen -b v0.56.0 --depth"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(`
cargo `),n("span",{class:"token function"},"install"),s(` --path rust-bindgen

`),n("span",{class:"token comment"},"# Clone the `Rust for Linux` repo"),s(`
`),n("span",{class:"token function"},"git"),s(" clone https://github.com/jackos/linux -b tutorial-start --depth"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token builtin class-name"},"cd"),s(` linux

`),n("span",{class:"token comment"},"# Set your rustc version to the current version being used with Rust for Linux"),s(`
rustup override `),n("span",{class:"token builtin class-name"},"set"),s(),n("span",{class:"token variable"},[n("span",{class:"token variable"},"$("),s("scripts/min-tool-version.sh rustc"),n("span",{class:"token variable"},")")]),s(`
rustup component `),n("span",{class:"token function"},"add"),s(` rust-src

`),n("span",{class:"token comment"},"# Do an initial minimal build to make sure everything is working"),s(`
`),n("span",{class:"token function"},"make"),s(` allnoconfig qemu-busybox-min.config rust.config
`),n("span",{class:"token function"},"make"),s(`
`)])])],-1),E=n("h2",{id:"ide",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ide","aria-hidden":"true"},"#"),s(" IDE")],-1),W=s("If you're using "),G=n("code",null,"vscode",-1),H=s(" and "),U=n("code",null,"docker",-1),$=s(" you can connect into the docker container using the "),Y={href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack",target:"_blank",rel:"noopener noreferrer"},K=s("Remote Development"),Q=s(" extension, and install "),J=n("code",null,"rust-analyzer",-1),X=s(" after connecting to it. We'll add "),Z=n("code",null,"rust-analyzer",-1),nn=s(" support in a later step which will work with any editor supporting "),sn=n("code",null,"lsp",-1),an=s(" such as "),tn=n("code",null,"neovim",-1),en=s(" and "),on=n("code",null,"helix",-1),pn=s("."),cn=e(`<h2 id="adding-the-rust-module" tabindex="-1"><a class="header-anchor" href="#adding-the-rust-module" aria-hidden="true">#</a> Adding the Rust module</h2><p>The module we&#39;ll be creating is called <code>VDev</code> short for <code>Virtual Device</code>, we&#39;ll add it to the <code>Kconfig</code>, so the <code>Makefile</code> configuration can find it:</p><h4 id="linux-samples-rust-kconfig" tabindex="-1"><a class="header-anchor" href="#linux-samples-rust-kconfig" aria-hidden="true">#</a> linux/samples/rust/Kconfig</h4><div class="language-txt ext-txt"><pre class="language-txt"><code>config SAMPLE_RUST_VDEV
	tristate &quot;Virtual Device&quot;
	help
	  This option builds the Rust virtual device module sample.

	  To compile this as a module, choose M here:
	  the module will be called rust_vdev.

	  If unsure, say N.
</code></pre></div><p>We also to specify where the <code>Makefile</code> can find the object file:</p><h4 id="linux-samples-rust-makefile" tabindex="-1"><a class="header-anchor" href="#linux-samples-rust-makefile" aria-hidden="true">#</a> linux/samples/rust/Makefile</h4><div class="language-make ext-make"><pre class="language-make"><code>obj-$(CONFIG_SAMPLE_RUST_VDEV) 			+= rust_vdev.o
</code></pre></div><p>Now let&#39;s create a new file and write a minimal module:</p><h4 id="linux-samples-rust-rust-vdev-rs" tabindex="-1"><a class="header-anchor" href="#linux-samples-rust-rust-vdev-rs" aria-hidden="true">#</a> linux/samples/rust/rust_vdev.rs</h4><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token comment">//! Virtual Device Module</span>
<span class="token keyword">use</span> <span class="token namespace">kernel<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token macro property">module!</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token class-name">VDev</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">b&quot;vdev&quot;</span><span class="token punctuation">,</span>
    license<span class="token punctuation">:</span> <span class="token string">b&quot;GPL&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">VDev</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token namespace">kernel<span class="token punctuation">::</span></span><span class="token class-name">Module</span> <span class="token keyword">for</span> <span class="token class-name">VDev</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span>_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">CStr</span><span class="token punctuation">,</span> _module<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">ThisModule</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// Print a banner to make sure our moudle is working</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;starting virtual device!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">VDev</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>module!</code> macro takes care of all the boilerplate, we&#39;ll build and run the VM next to make sure everything is working.</p>`,11),ln={href:"https://github.com/jackos/linux/commit/7551eb533fb45e9cacf2b9d1098ce9552d60b65a",target:"_blank",rel:"noopener noreferrer"},un=s("2: module working - file changes"),rn=e(`<h2 id="building-and-running-the-kernel" tabindex="-1"><a class="header-anchor" href="#building-and-running-the-kernel" aria-hidden="true">#</a> Building and running the Kernel</h2><p>The following command will bring up a <code>TUI</code> for setting the build configuration interactively, we need to enable our sample module:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> menuconfig
</code></pre></div><p>Follow the menu items, checking any boxes as you go with <code>space</code>:</p><ul><li>Kernel Hacking: <code>enter</code></li><li>Sample kernel code: <code>space</code> + <code>enter</code></li><li>Rust Samples: <code>space</code> + <code>enter</code></li><li>Virtual Device: <code>space</code> + <code>enter</code></li><li>Press exit three times and save config</li></ul><p>Run <code>make</code> and start the kernel in a VM:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span>
qemu-system-x86_64 -nographic -kernel vmlinux -initrd initrd.img -nic user,model<span class="token operator">=</span>rtl8139,hostfwd<span class="token operator">=</span>tcp::5555-:23
</code></pre></div><p>If all went well you should see:</p><div class="language-plaintext ext-plaintext"><pre class="language-plaintext"><code>[0.623465] vdev: -----------------------
[0.623629] vdev: initialize vdev module!
[0.677356] vdev: -----------------------
</code></pre></div><p>Somewhere in the terminal</p><h2 id="restarting-the-kernel" tabindex="-1"><a class="header-anchor" href="#restarting-the-kernel" aria-hidden="true">#</a> Restarting the kernel</h2><p>If you want to reload on file changes you can initialize a &quot;hello world&quot; repo and run <code>cargo watch</code> with the <code>-s</code> flag:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>cargo init <span class="token builtin class-name">.</span>
cargo <span class="token function">install</span> cargo-watch
cargo <span class="token function">watch</span> -w ./samples/rust/rust_vdev.rs -cs <span class="token string">&#39;make &amp;&amp; qemu-system-x86_64 -nographic -kernel vmlinux -initrd initrd.img -nic user,model=rtl8139,hostfwd=tcp::5555-:23&#39;</span>
</code></pre></div><p>If you just want to run normal commands without the <code>Makefile</code>, in the running the <code>qemu</code> virtualization you can turn it off and start it again by running the commands:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>poweroff
<span class="token function">make</span>
qemu-system-x86_64 -nographic -kernel vmlinux -initrd initrd.img -nic user,model<span class="token operator">=</span>rtl8139,hostfwd<span class="token operator">=</span>tcp::5555-:23
</code></pre></div><p>We can also add it to the <code>Makefile</code> to make it easier to run the command:</p><h4 id="linux-makefile" tabindex="-1"><a class="header-anchor" href="#linux-makefile" aria-hidden="true">#</a> linux/Makefile</h4><div class="language-Makefile ext-Makefile"><pre class="language-Makefile"><code>PHONY += rustwatch
rustwatch:
	$(Q) cargo watch -w ./samples/rust/rust_vdev.rs -cs &#39;make &amp;&amp; qemu-system-x86_64 -nographic -kernel vmlinux -initrd initrd.img -nic user,model=rtl8139,hostfwd=tcp::5555-:23&#39;

PHONY += rustvm
rustvm:
	$(Q) make &amp;&amp; qemu-system-x86_64 -nographic -kernel vmlinux -initrd initrd.img -nic user,model=rtl8139,hostfwd=tcp::5555-:23
</code></pre></div><p>Now we can run the commands:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># Rebuild and start the VM</span>
<span class="token function">make</span> rustvm
<span class="token comment"># Start a watch, which will rebuild and start the VM on file changes</span>
<span class="token function">make</span> rustwatch
</code></pre></div>`,20),kn={href:"https://github.com/jackos/linux/commit/8cd8c7965e18f272d3cb50844d55b43c1960abdb",target:"_blank",rel:"noopener noreferrer"},dn=s("3: add watch - file changes"),mn=e(`<h2 id="fix-rust-analyzer" tabindex="-1"><a class="header-anchor" href="#fix-rust-analyzer" aria-hidden="true">#</a> Fix Rust Analyzer</h2><p><code>rust-analyzer</code> is a <code>Language Sever Protocol (lsp)</code> implementation that provides features like <code>completions</code> and <code>go to definition</code>, to get it to work with our project run:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> rust-analyzer
</code></pre></div><p>This produces a <code>rust-project.json</code> allowing <code>rust-anlyzer</code> to parse a project without a <code>Cargo.toml</code>, we need to do this because <code>rustc</code> is being invoked directly by the <code>Makefile</code>.</p><p>Now that we have Rust Analyzer working I highly recommend you make use of <code>Go to Definition</code> to see how everything has been implemented. We&#39;re not using the <code>std</code> for our core functionality, we&#39;re using custom kernel implementations that are suited to the <code>C</code> bindings. E.g. a mutex lock will not return a poison <code>Result</code> because we don&#39;t want the whole kernel to panic if a single thread panics.</p><h2 id="register-device" tabindex="-1"><a class="header-anchor" href="#register-device" aria-hidden="true">#</a> Register device</h2><p>All the below changes are on <code>linux/samples/rust/rust_vdev.rs</code></p><p>Add these imports:</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">kernel<span class="token punctuation">::</span>file<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">Operations</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">kernel<span class="token punctuation">::</span></span><span class="token punctuation">{</span>miscdev<span class="token punctuation">,</span> <span class="token class-name">Module</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Change the <code>VDev</code> struct to allow us to register a device into the <code>/dev/</code> folder</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">VDev</span> <span class="token punctuation">{</span>
    _dev<span class="token punctuation">:</span> <span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token namespace">miscdev<span class="token punctuation">::</span></span><span class="token class-name">Registration</span><span class="token operator">&lt;</span><span class="token class-name">VDev</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Change our <code>Module</code> implementation for <code>VDev</code>, you can see that <code>miscdev::Registration</code> is being called with an argument of <code>vdev</code>, so the device will be named <code>/dev/vdev</code></p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Module</span> <span class="token keyword">for</span> <span class="token class-name">VDev</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span>_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">CStr</span><span class="token punctuation">,</span> _module<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">ThisModule</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;initialize vdev module!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;watching for changes...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">VDev</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token namespace">miscdev<span class="token punctuation">::</span></span><span class="token class-name">Registration</span><span class="token punctuation">::</span><span class="token function">new_pinned</span><span class="token punctuation">(</span><span class="token macro property">fmt!</span><span class="token punctuation">(</span><span class="token string">&quot;vdev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token keyword">Self</span> <span class="token punctuation">{</span> _dev<span class="token punctuation">:</span> reg <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Add the minimal implementation for a device which will print &quot;File was opened&quot; when we perform a <code>cat /dev/vdev</code></p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[vtable]</span>
<span class="token keyword">impl</span> <span class="token class-name">Operations</span> <span class="token keyword">for</span> <span class="token class-name">VDev</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span>_context<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _file<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;File was opened\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,15),hn={href:"https://github.com/jackos/linux/commit/c5514d8d909c30cb756fb25126c13d1a771b0028",target:"_blank",rel:"noopener noreferrer"},fn=s("4: register device - file changes"),gn=e(`<h2 id="implement-read-and-write" tabindex="-1"><a class="header-anchor" href="#implement-read-and-write" aria-hidden="true">#</a> Implement Read and Write</h2><p>We&#39;re going to allow multiple threads to read and write from a place in memory, so we need a <code>Mutex</code>, we&#39;ll use <code>smutext</code> short for <code>simple mutex</code>, a custom kernel mutex that doesn&#39;t return a poison <code>Result</code> on <code>lock()</code>.</p><p>Add the imports</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">kernel<span class="token punctuation">::</span>io_buffer<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">IoBufferReader</span><span class="token punctuation">,</span> <span class="token class-name">IoBufferWriter</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">kernel<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>smutex<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">kernel<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Ref</span><span class="token punctuation">,</span> <span class="token class-name">RefBorrow</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Add a struct representing a <code>Device</code> to hold onto data and track its own number</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Device</span> <span class="token punctuation">{</span>
    number<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>
    contents<span class="token punctuation">:</span> <span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Now let&#39;s add the correct associated types to the <code>Operations</code> implementation and add the <code>read</code> and <code>write</code> methods:</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Operations</span> <span class="token keyword">for</span> <span class="token class-name">VDev</span> <span class="token punctuation">{</span>
    <span class="token comment">// The data that is passed into the open method </span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">OpenData</span> <span class="token operator">=</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">Device</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">// The data that is returned by running an open method</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Data</span> <span class="token operator">=</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">Device</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">Device</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> _file<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">Device</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;File for device {} was opened\\n&quot;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Read the data contents and write them into the buffer provided</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span>
        data<span class="token punctuation">:</span> <span class="token class-name">RefBorrow</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token punctuation">,</span> <span class="token class-name">Device</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        _file<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">File</span><span class="token punctuation">,</span>
        writer<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">impl</span> <span class="token class-name">IoBufferWriter</span><span class="token punctuation">,</span>
        offset<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;File for device {} was read\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> offset <span class="token operator">=</span> offset<span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> vec <span class="token operator">=</span> data<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token namespace">core<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token function">min</span><span class="token punctuation">(</span>writer<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saturating_sub</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vec<span class="token punctuation">[</span>offset<span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">..</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Read from the buffer and write the data in the contents after locking the mutex</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span>
        data<span class="token punctuation">:</span> <span class="token class-name">RefBorrow</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token punctuation">,</span> <span class="token class-name">Device</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        _file<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">File</span><span class="token punctuation">,</span>
        reader<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">impl</span> <span class="token class-name">IoBufferReader</span><span class="token punctuation">,</span>
        _offset<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;File for device {} was written\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> copy <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> len <span class="token operator">=</span> copy<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>data<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,8),vn={href:"https://github.com/jackos/linux/commit/eaa80f91cbcc2ddce334583bbfca15e500515fca",target:"_blank",rel:"noopener noreferrer"},wn=s("5: read and write - file changes"),_n=e(`<p>Now this is all set up start the vm, if you set up the make command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span> rustvm
</code></pre></div><p>Or to just run the command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>qemu-system-x86_64 -nographic -kernel vmlinux -initrd initrd.img -nic user,model<span class="token operator">=</span>rtl8139,hostfwd<span class="token operator">=</span>tcp::5555-:23
</code></pre></div><p>When in the VM run the commands:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;wow it works&quot;</span> <span class="token operator">&gt;</span> /dev/vdev
<span class="token function">cat</span> /dev/vdev
</code></pre></div><p>If everything is working you should see:</p><div class="language-plaintext ext-plaintext"><pre class="language-plaintext"><code>echo &quot;wow it works&quot; &gt; /dev/vdev
[41.498265] vdev: File for device 1 was opened
[41.498564] vdev: File for device 1 was written
cat /dev/vdev
[65.435708] vdev: File for device 1 was opened
[65.436339] vdev: File for device 1 was read
wow it works
[65.436712] vdev: File for device 1 was read
</code></pre></div><h2 id="using-kernel-parameters" tabindex="-1"><a class="header-anchor" href="#using-kernel-parameters" aria-hidden="true">#</a> Using kernel parameters</h2><p>We&#39;re now going to set up a kernel parameter which we can change when we start the VM to modify behavior, in this case it&#39;ll start more devices</p><p>Add the flags import:</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">kernel<span class="token punctuation">::</span>file<span class="token punctuation">::</span></span><span class="token punctuation">{</span>flags<span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">Operations</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Modify the <code>module!</code> macro so that it now contains a parameter, <code>devices</code> will be the name of the parameter which can be accessed from <code>vdev.devices</code>:</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token macro property">module!</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token class-name">VDev</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">b&quot;vdev&quot;</span><span class="token punctuation">,</span>
    license<span class="token punctuation">:</span> <span class="token string">b&quot;GPL&quot;</span><span class="token punctuation">,</span>
    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        devices<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>
            default<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            permissions<span class="token punctuation">:</span> <span class="token number">0o644</span><span class="token punctuation">,</span>
            description<span class="token punctuation">:</span> <span class="token string">b&quot;Number of virtual devices&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Let&#39;s change the structure of our devices so that it&#39;s a vec now:</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">VDev</span> <span class="token punctuation">{</span>
    _devs<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Pin</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token namespace">miscdev<span class="token punctuation">::</span></span><span class="token class-name">Registration</span><span class="token operator">&lt;</span><span class="token class-name">VDev</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Update the <code>open</code> method to clear the data if it&#39;s opened in <code>write only</code> mode</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">Device</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> file<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token class-name">Device</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;File for device {} was opened\\n&quot;</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> file<span class="token punctuation">.</span><span class="token function">flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token namespace">flags<span class="token punctuation">::</span></span><span class="token constant">O_ACCMODE</span> <span class="token operator">==</span> <span class="token namespace">flags<span class="token punctuation">::</span></span><span class="token constant">O_WRONLY</span> <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Update the write method to increase the size of the vec if required instead of allocating new memory</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span>
        data<span class="token punctuation">:</span> <span class="token class-name">RefBorrow</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token punctuation">,</span> <span class="token class-name">Device</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
        _file<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">File</span><span class="token punctuation">,</span>
        reader<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">impl</span> <span class="token class-name">IoBufferReader</span><span class="token punctuation">,</span>
        _offset<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
        offset<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;File for device {} was written\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> copy <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> len <span class="token operator">=</span> copy<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>data<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span>
        <span class="token keyword">let</span> offset <span class="token operator">=</span> offset<span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> new_len <span class="token operator">=</span> len<span class="token punctuation">.</span><span class="token function">checked_add</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token constant">EINVAL</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> data<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> new_len <span class="token operator">&gt;</span> vec<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vec<span class="token punctuation">.</span><span class="token function">try_resize</span><span class="token punctuation">(</span>new_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        reader<span class="token punctuation">.</span><span class="token function">read_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> vec<span class="token punctuation">[</span>offset<span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">..</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>Update the <code>Module</code> impl for <code>VDev</code> so that the same amount of devices are registered as specified by the kernel param.</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Module</span> <span class="token keyword">for</span> <span class="token class-name">VDev</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span>_name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">CStr</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;static</span> <span class="token class-name">ThisModule</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> lock <span class="token operator">=</span> module<span class="token punctuation">.</span><span class="token function">kernel_param_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">(</span><span class="token operator">*</span>devices<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;starting {} vdevices!\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;watching for changes...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token macro property">pr_info!</span><span class="token punctuation">(</span><span class="token string">&quot;-----------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> <span class="token keyword">mut</span> devs <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">try_with_capacity</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>count <span class="token punctuation">{</span>
          <span class="token keyword">let</span> dev <span class="token operator">=</span> <span class="token class-name">Ref</span><span class="token punctuation">::</span><span class="token function">try_new</span><span class="token punctuation">(</span><span class="token class-name">Device</span> <span class="token punctuation">{</span>
              number<span class="token punctuation">:</span> i<span class="token punctuation">,</span>
              contents<span class="token punctuation">:</span> <span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
          <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token namespace">miscdev<span class="token punctuation">::</span></span><span class="token class-name">Registration</span><span class="token punctuation">::</span><span class="token function">new_pinned</span><span class="token punctuation">(</span><span class="token macro property">fmt!</span><span class="token punctuation">(</span><span class="token string">&quot;vdev{i}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
          devs<span class="token punctuation">.</span><span class="token function">try_push</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token keyword">Self</span> <span class="token punctuation">{</span> _devs<span class="token punctuation">:</span> devs <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Now we can change the Makefile adding the argument: <code>-append &quot;vdev.devices=4&quot;</code></p><div class="language-Makefile ext-Makefile"><pre class="language-Makefile"><code>PHONY += rustwatch
rustwatch:
	$(Q) cargo watch -w ./samples/rust/rust_vdev.rs -cs &#39;make &amp;&amp; qemu-system-x86_64 -append &quot;vdev.devices=4&quot; -nographic -kernel vmlinux -initrd initrd.img -nic user,model=rtl8139,hostfwd=tcp::5555-:23&#39;

PHONY += rustvm
rustvm:
	$(Q) make &amp;&amp; qemu-system-x86_64 -append &quot;vdev.devices=4&quot; -nographic -kernel vmlinux -initrd initrd.img -nic user,model=rtl8139,hostfwd=tcp::5555-:23
</code></pre></div><p>And then running <code>rustvm</code> or <code>rustwatch</code></p><p>Or if you want to run the commands directly:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">make</span>
qemu-system-x86_64 -append <span class="token string">&quot;vdev.devices=4&quot;</span> -nographic -kernel vmlinux -initrd initrd.img -nic user,model<span class="token operator">=</span>rtl8139,hostfwd<span class="token operator">=</span>tcp::5555-:23
</code></pre></div>`,27),bn={href:"https://github.com/jackos/linux/blob/2c944f4bc399e07ba7bc6ec95925f503221bfa06/samples/rust/rust_vdev.rs",target:"_blank",rel:"noopener noreferrer"},yn=s("final file"),xn=e('<h2 id="repo-areas-of-interest" tabindex="-1"><a class="header-anchor" href="#repo-areas-of-interest" aria-hidden="true">#</a> Repo areas of interest</h2><p>Now that you have a general idea of how to write your own module, take a look around in the repo, some areas of interest are:</p><ul><li><code>linux/rust</code></li><li><code>linux/rust/kernel</code></li><li><code>linux/Documentation/rust</code></li></ul><p>And don&#39;t forget to have a look through all the samples and play around with them if you&#39;re interested:</p><ul><li><code>linux/samples/rust</code></li></ul><p>You can activate whichever ones you want with <code>make menuconfig</code> as before</p>',6),qn=s("That's it, thanks for reading, and please don't hesitate to raise an issue at: "),Rn={href:"https://github.com/jackos/jackos.io",target:"_blank",rel:"noopener noreferrer"},Dn=s("github:jackos/jackos.io"),Vn=s(" if you have any suggestions or problems with this content."),Mn=n("p",null,"I look forward to seeing your pull requests in the linux kernel!",-1);function jn(In,Sn){const t=c("ExternalLinkIcon"),p=c("CodeGroupItem"),l=c("CodeGroup");return u(),r("div",null,[d,m,n("p",null,[h,n("a",f,[g,a(t)]),v]),n("p",null,[w,n("a",_,[b,a(t)]),y,n("a",x,[q,a(t)]),R,n("a",D,[V,a(t)])]),n("p",null,[M,n("a",j,[I,a(t)]),S,n("a",O,[z,a(t)]),F,n("a",A,[L,a(t)]),C]),N,a(l,null,{default:o(()=>[a(p,{title:"docker"},{default:o(()=>[T]),_:1}),a(p,{title:"arch"},{default:o(()=>[P]),_:1}),a(p,{title:"ubuntu",active:""},{default:o(()=>[B]),_:1})]),_:1}),E,n("p",null,[W,G,H,U,$,n("a",Y,[K,a(t)]),Q,J,X,Z,nn,sn,an,tn,en,on,pn]),cn,n("p",null,[n("a",ln,[un,a(t)])]),rn,n("p",null,[n("a",kn,[dn,a(t)])]),mn,n("p",null,[n("a",hn,[fn,a(t)])]),gn,n("p",null,[n("a",vn,[wn,a(t)])]),_n,n("p",null,[n("a",bn,[yn,a(t)])]),xn,n("p",null,[qn,n("a",Rn,[Dn,a(t)]),Vn]),Mn])}var zn=i(k,[["render",jn],["__file","rust-for-linux.html.vue"]]);export{zn as default};
